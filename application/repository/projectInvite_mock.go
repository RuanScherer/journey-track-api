// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/projectInvite.go
//
// Generated by this command:
//
//	mockgen -source=application/repository/projectInvite.go -destination=application/repository/projectInvite_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/RuanScherer/journey-track-api/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectInviteRepository is a mock of ProjectInviteRepository interface.
type MockProjectInviteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInviteRepositoryMockRecorder
}

// MockProjectInviteRepositoryMockRecorder is the mock recorder for MockProjectInviteRepository.
type MockProjectInviteRepositoryMockRecorder struct {
	mock *MockProjectInviteRepository
}

// NewMockProjectInviteRepository creates a new mock instance.
func NewMockProjectInviteRepository(ctrl *gomock.Controller) *MockProjectInviteRepository {
	mock := &MockProjectInviteRepository{ctrl: ctrl}
	mock.recorder = &MockProjectInviteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectInviteRepository) EXPECT() *MockProjectInviteRepositoryMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockProjectInviteRepository) BatchCreate(projectInvites []*model.ProjectInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", projectInvites)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockProjectInviteRepositoryMockRecorder) BatchCreate(projectInvites any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockProjectInviteRepository)(nil).BatchCreate), projectInvites)
}

// Create mocks base method.
func (m *MockProjectInviteRepository) Create(projectInvite *model.ProjectInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", projectInvite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProjectInviteRepositoryMockRecorder) Create(projectInvite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectInviteRepository)(nil).Create), projectInvite)
}

// DeleteById mocks base method.
func (m *MockProjectInviteRepository) DeleteById(projectInviteId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", projectInviteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockProjectInviteRepositoryMockRecorder) DeleteById(projectInviteId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockProjectInviteRepository)(nil).DeleteById), projectInviteId)
}

// FindById mocks base method.
func (m *MockProjectInviteRepository) FindById(projectInviteId string) (*model.ProjectInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", projectInviteId)
	ret0, _ := ret[0].(*model.ProjectInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockProjectInviteRepositoryMockRecorder) FindById(projectInviteId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockProjectInviteRepository)(nil).FindById), projectInviteId)
}

// FindByProjectAndToken mocks base method.
func (m *MockProjectInviteRepository) FindByProjectAndToken(projectId, token string) (*model.ProjectInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProjectAndToken", projectId, token)
	ret0, _ := ret[0].(*model.ProjectInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProjectAndToken indicates an expected call of FindByProjectAndToken.
func (mr *MockProjectInviteRepositoryMockRecorder) FindByProjectAndToken(projectId, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProjectAndToken", reflect.TypeOf((*MockProjectInviteRepository)(nil).FindByProjectAndToken), projectId, token)
}

// FindPendingByUserAndProject mocks base method.
func (m *MockProjectInviteRepository) FindPendingByUserAndProject(userId, projectId string) (*model.ProjectInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPendingByUserAndProject", userId, projectId)
	ret0, _ := ret[0].(*model.ProjectInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPendingByUserAndProject indicates an expected call of FindPendingByUserAndProject.
func (mr *MockProjectInviteRepositoryMockRecorder) FindPendingByUserAndProject(userId, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPendingByUserAndProject", reflect.TypeOf((*MockProjectInviteRepository)(nil).FindPendingByUserAndProject), userId, projectId)
}

// ListByProjectAndStatus mocks base method.
func (m *MockProjectInviteRepository) ListByProjectAndStatus(projectId, status string) ([]*model.ProjectInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByProjectAndStatus", projectId, status)
	ret0, _ := ret[0].([]*model.ProjectInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByProjectAndStatus indicates an expected call of ListByProjectAndStatus.
func (mr *MockProjectInviteRepositoryMockRecorder) ListByProjectAndStatus(projectId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByProjectAndStatus", reflect.TypeOf((*MockProjectInviteRepository)(nil).ListByProjectAndStatus), projectId, status)
}

// Save mocks base method.
func (m *MockProjectInviteRepository) Save(projectInvite *model.ProjectInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", projectInvite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProjectInviteRepositoryMockRecorder) Save(projectInvite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProjectInviteRepository)(nil).Save), projectInvite)
}
