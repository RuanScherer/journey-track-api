// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/project.go
//
// Generated by this command:
//
//	mockgen -source=application/repository/project.go -destination=application/repository/project_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/RuanScherer/journey-track-api/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockProjectRepository) DeleteById(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockProjectRepositoryMockRecorder) DeleteById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockProjectRepository)(nil).DeleteById), id)
}

// FindById mocks base method.
func (m *MockProjectRepository) FindById(id string) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockProjectRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockProjectRepository)(nil).FindById), id)
}

// FindByMemberId mocks base method.
func (m *MockProjectRepository) FindByMemberId(memberId string) ([]*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMemberId", memberId)
	ret0, _ := ret[0].([]*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMemberId indicates an expected call of FindByMemberId.
func (mr *MockProjectRepositoryMockRecorder) FindByMemberId(memberId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMemberId", reflect.TypeOf((*MockProjectRepository)(nil).FindByMemberId), memberId)
}

// FindMembersCountAndEventsCountById mocks base method.
func (m *MockProjectRepository) FindMembersCountAndEventsCountById(id string) (*ProjectInvitesCountAndEventsCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembersCountAndEventsCountById", id)
	ret0, _ := ret[0].(*ProjectInvitesCountAndEventsCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembersCountAndEventsCountById indicates an expected call of FindMembersCountAndEventsCountById.
func (mr *MockProjectRepositoryMockRecorder) FindMembersCountAndEventsCountById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembersCountAndEventsCountById", reflect.TypeOf((*MockProjectRepository)(nil).FindMembersCountAndEventsCountById), id)
}

// HasMember mocks base method.
func (m *MockProjectRepository) HasMember(projectID, memberID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMember", projectID, memberID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMember indicates an expected call of HasMember.
func (mr *MockProjectRepositoryMockRecorder) HasMember(projectID, memberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMember", reflect.TypeOf((*MockProjectRepository)(nil).HasMember), projectID, memberID)
}

// Register mocks base method.
func (m *MockProjectRepository) Register(project *model.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockProjectRepositoryMockRecorder) Register(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockProjectRepository)(nil).Register), project)
}

// Save mocks base method.
func (m *MockProjectRepository) Save(project *model.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProjectRepositoryMockRecorder) Save(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProjectRepository)(nil).Save), project)
}
