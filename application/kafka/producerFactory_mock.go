// Code generated by MockGen. DO NOT EDIT.
// Source: producerFactory.go
//
// Generated by this command:
//
//	mockgen -source=producerFactory.go -destination=producerFactory_mock.go -package=kafka
//

// Package kafka is a generated GoMock package.
package kafka

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProducerFactory is a mock of ProducerFactory interface.
type MockProducerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockProducerFactoryMockRecorder
}

// MockProducerFactoryMockRecorder is the mock recorder for MockProducerFactory.
type MockProducerFactoryMockRecorder struct {
	mock *MockProducerFactory
}

// NewMockProducerFactory creates a new mock instance.
func NewMockProducerFactory(ctrl *gomock.Controller) *MockProducerFactory {
	mock := &MockProducerFactory{ctrl: ctrl}
	mock.recorder = &MockProducerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerFactory) EXPECT() *MockProducerFactoryMockRecorder {
	return m.recorder
}

// NewProducer mocks base method.
func (m *MockProducerFactory) NewProducer(config map[string]any) (Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProducer", config)
	ret0, _ := ret[0].(Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProducer indicates an expected call of NewProducer.
func (mr *MockProducerFactoryMockRecorder) NewProducer(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProducer", reflect.TypeOf((*MockProducerFactory)(nil).NewProducer), config)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockProducer) Produce(topic string, message Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", topic, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerMockRecorder) Produce(topic, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducer)(nil).Produce), topic, message)
}
