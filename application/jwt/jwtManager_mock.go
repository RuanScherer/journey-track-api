// Code generated by MockGen. DO NOT EDIT.
// Source: application/jwt/jwtManager.go
//
// Generated by this command:
//
//	mockgen -source=application/jwt/jwtManager.go -destination=application/jwt/jwtManager_mock.go -package=jwt
//

// Package jwt is a generated GoMock package.
package jwt

import (
	reflect "reflect"

	model "github.com/RuanScherer/journey-track-api/application/model"
	model0 "github.com/RuanScherer/journey-track-api/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateJwtFromUser mocks base method.
func (m *MockManager) CreateJwtFromUser(user *model0.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJwtFromUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJwtFromUser indicates an expected call of CreateJwtFromUser.
func (mr *MockManagerMockRecorder) CreateJwtFromUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJwtFromUser", reflect.TypeOf((*MockManager)(nil).CreateJwtFromUser), user)
}

// GetJwtClaims mocks base method.
func (m *MockManager) GetJwtClaims(token string) (*model.JwtClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtClaims", token)
	ret0, _ := ret[0].(*model.JwtClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJwtClaims indicates an expected call of GetJwtClaims.
func (mr *MockManagerMockRecorder) GetJwtClaims(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtClaims", reflect.TypeOf((*MockManager)(nil).GetJwtClaims), token)
}
